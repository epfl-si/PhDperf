- include_vars: common-k8s-vars.yml
  tags: always

- name: "Pull upstream {{ phd_assess_ubuntu_base_image.qualified }} image into {{ phd_assess_ubuntu_base_image.mirrored }}"
  when: openshift_namespace == phd_assess_build_namespace
  openshift_imagestream:
    metadata:
      name: "{{ phd_assess_ubuntu_base_image.shortname }}"
      namespace: "{{ openshift_namespace }}"
    from: "{{ phd_assess_ubuntu_base_image.qualified }}"
    tag: "{{ phd_assess_ubuntu_base_image.tag }}"
  tags: meteor-build

- name: "Build NodeJS base image in OpenShift"
  when: openshift_namespace == phd_assess_build_namespace
  openshift_imagestream:
    metadata:
      name: "node-base"
      namespace: "{{ phd_assess_build_namespace }}"
    from: "{{ phd_assess_ubuntu_base_image.mirrored }}"
    git:
      repository: "https://github.com/epfl-si/PhDAssess"
      path: docker/node-base
    spec:
      resources:
        limits:
          memory: "1G"
  tags: meteor-build

- name: "Build Meteor serving image in OpenShift"
  when: openshift_namespace == phd_assess_build_namespace
  openshift_imagestream:
    metadata:
      name: "{{ phd_assess_meteor_image_name }}"
      namespace: "{{ phd_assess_build_namespace }}"
    from: "{{ openshift_local_images_base }}/node-base"
    git:
      repository: "https://github.com/epfl-si/PhDAssess"
      path: apps/fillForm
    spec:
      resources:
        limits:
          memory: "4G"
  tags: meteor-build
  register: _phd_assess_meteor_build

- name: "Scale down all pods from test (to free memory)"
  when:
    - >-
      openshift_namespace == phd_assess_build_namespace
  shell:
    cmd: |
      oc scale --replicas=0 $(oc get dc -o name -n "{{ openshift_namespace }}" | xargs) -n "{{ openshift_namespace }}"
  tags:
    - never
    - meteor-scale-down

- name: "Scale up some pods from test (useful when build is done)"
  when:
    - >-
      openshift_namespace == phd_assess_build_namespace
  shell:
    cmd: |
      oc scale --replicas=1 $(oc get dc -o name -n "{{ openshift_namespace }}" | grep -v simple-monitor  | xargs) -n "{{ openshift_namespace }}"
  tags:
    - never
    - meteor-scale-up

- name: "Rebuild Meteor serving image now"
  when:
    - >-
      openshift_namespace == phd_assess_build_namespace
    - >-
      ( (_phd_assess_meteor_build | default({})) is changed )
      or
      ( "meteor-rebuild" in ansible_run_tags )
  shell:
    cmd: |
      oc -n "{{ openshift_namespace }}" start-build "{{ phd_assess_meteor_image_name }}"
  tags: meteor-rebuild

- name: "Promote images from {{ phd_assess_build_namespace }} to production"
  when:
    - >-
      openshift_namespace != phd_assess_build_namespace
    - >-
      "meteor-promote" in ansible_run_tags
  tags: meteor-promote
  include_tasks:
    file: _promote_image.yml
    apply:
      tags:
        - meteor
        - meteor-promote
  vars:
    promote_image_name: "{{ phd_assess_meteor_image_name }}"
    promote_image_tag: "latest"
    promote_from_namespace: "{{ phd_assess_build_namespace }}"

- name: "Build image locally and push it to {{ phd_assess_build_namespace }}"
  when: openshift_namespace == phd_assess_build_namespace
  tags:
    - meteor-push
    - never
  shell: |
    set -e -x
    oc whoami -t | docker login {{ openshift_image_registry }} -u unused --password-stdin
    docker build -t {{ phd_assess_meteor_image_tag }} ../apps/fillForm
    docker push {{ phd_assess_meteor_image_tag }}
  register: output_push_image
  delegate_to: localhost

- name: phd-assess-meteor Deployment Config
  openshift:
    state: latest
    apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      name: phd-assess-meteor
      namespace: "{{openshift_namespace}}"
    spec:
      replicas: 1
      selector:
        deployment-config.name: phd-assess-meteor
      strategy:
        resources: "{{ k8s_frugal_resources }}"
      template:
        metadata:
          creationTimestamp: null
          labels:
            deployment-config.name: phd-assess-meteor
        spec:
          containers:
            - name: phd-assess-meteor
              image: '{{ openshift_local_images_base }}/{{ phd_assess_meteor_servicename }}:latest'
              ports:
                - name: metrics
                  containerPort: 3000
              env:
              - name: 'PORT'
                value: '3000'
              - name: 'ROOT_URL'
                value: "{{ frontend_url }}"
              - name: 'MONGO_URL'
                value: 'mongodb://mongo:27017/meteor'
              - name: 'ZEEBE_ADDRESS'
                value: '{{ zeebe_gateway_servicename }}:{{ zeebe_ports.api }}'
              - name: 'ZEEBE_NODE_LOG_LEVEL'
                value: 'ERROR'
              - name: 'DEBUG'
                value: 'phd-assess:*'
              - name: 'METEOR_SETTINGS'
                value: '{ "public": {"isTest":{{ is_test }}, "phdAssessRoleAdmin":"PhD-annual-report-admin","phdAssessRoleProgramAssistant":"PhD-annual-report-administrative-assistant" } }'
              - name: 'ISA_IMPORT_API_URL'
                value: 'http://isa.epfl.ch/services/v1/doctorants/current/programme'
              - name: 'ZEEBE_WORKER_TIMEOUT'
                value: '300000'
              - name: 'ZEEBE_WORKER_MAX_JOBS_TO_ACTIVATE'
                # tried:
                #   - 100: too much, 10 were gone as error
                #   - 66: too much, 3 were gone as error
                value: '50'
              - name: 'TZ'
                value: 'Europe/Zurich'
              - name: 'NODE_OPTIONS'
                value: "--max_old_space_size={{ '1536' if openshift_namespace == 'phd-assess' else '615' }}"
              - name: "{{ encryption_key_name }}"
                valueFrom:
                  secretKeyRef:
                    name: "{{ secret_name }}"
                    key: "{{ encryption_key_name }}"
              - name: "{{ api_epfl_ch_token_key_name }}"
                valueFrom:
                  secretKeyRef:
                    name: "{{ meteor_secret_name }}"
                    key: "{{ api_epfl_ch_token_key_name }}"
              - name: "{{ persistent_mongo_url_key_name }}"
                valueFrom:
                  secretKeyRef:
                    name: "{{ meteor_secret_name }}"
                    key: "{{ persistent_mongo_url_key_name }}"
              command:
                - /usr/bin/node
                - main.js
              resources:
                limits:
                  cpu: '250m'
                  memory: "{{ '2G' if openshift_namespace == 'phd-assess' else '800M' }}"
      triggers:
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
          - phd-assess-meteor
          from:
            kind: ImageStreamTag
            name: 'phd-assess-meteor:latest'
            namespace: "{{openshift_namespace}}"
  tags: meteor-deploy

- name: phd-assess-meteor Service
  openshift:
    state: latest
    apiVersion: v1
    kind: Service
    metadata:
      name: "{{ phd_assess_meteor_servicename }}"
      namespace: "{{openshift_namespace}}"
    spec:
      type: ClusterIP
      ports:
        - name: "frontend"
          port: 80
          protocol: TCP
          targetPort: 3000
      selector:
        deployment-config.name: phd-assess-meteor
